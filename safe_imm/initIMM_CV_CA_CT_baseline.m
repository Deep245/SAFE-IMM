% --- IMM initializer: CV + CA + CT (6D meas), dt-agnostic ---
function imm = initIMM_CV_CA_CT_baseline(detection)
    % Measurement mappings to [x y z vx vy vz]
    % CV: [x vx y vy z vz]
    measCV6 = @(x) [x(1); x(3); x(5); x(2); x(4); x(6)];
    % CA: [x vx ax y vy ay z vz az]
    measCA6 = @(x) [x(1); x(4); x(7); x(2); x(5); x(8)];
    % CT: [x vx y vy omega z vz]
    measCT6 = @(x) [x(1); x(3); x(6); x(2); x(4); x(7)];

    m = detection.Measurement(:);  % [x y z vx vy vz]

    % ---------- CV EKF ----------
    xcv0 = [m(1); m(4); m(2); m(5); m(3); m(6)];
    Pcv0 = diag([ 4 25  4 25  4 25 ]);                     % pos ~2m, vel ~5 m/s
    Qcv  = blkdiag(0.4*eye(2), 0.4*eye(2), 0.8*eye(2));    % Z a bit looser
    ekfCV = trackingEKF( ...
        'State',               xcv0, ...
        'StateCovariance',     Pcv0, ...
        'StateTransitionFcn',  @(x,dt) constvel(x,dt), ...
        'ProcessNoise',        Qcv, ...
        'MeasurementFcn',      measCV6, ...
        'MeasurementNoise',    detection.MeasurementNoise);

    % ---------- CA EKF ----------
    % Initialize accelerations at 0 with large uncertainty
    xca0 = [m(1); m(4); 0;  m(2); m(5); 0;  m(3); m(6); 0];
    Pca0 = diag([ 4 25 25,  4 25 25,  9 36 36 ]);         % big var on a*, Z larger
    Qca  = blkdiag(0.4*eye(3), 0.4*eye(3), 0.8*eye(3));
    ekfCA = trackingEKF( ...
        'State',               xca0, ...
        'StateCovariance',     Pca0, ...
        'StateTransitionFcn',  @(x,dt) constacc(x,dt), ...
        'ProcessNoise',        Qca, ...
        'MeasurementFcn',      measCA6, ...
        'MeasurementNoise',    detection.MeasurementNoise);

    % ---------- CT EKF ----------
    xct0 = [m(1); m(4); m(2); m(5); 0;  m(3); m(6)];      % omega=0
    Pct0 = diag([ 4 25  4 25  (pi/2)^2  9 36 ]);
    Qct  = blkdiag(0.4*eye(2), 0.4*eye(2), 0.05, 0.8*eye(2));
    ekfCT = trackingEKF( ...
        'State',               xct0, ...
        'StateCovariance',     Pct0, ...
        'StateTransitionFcn',  @(x,dt) constturn(x,dt), ...
        'ProcessNoise',        Qct, ...
        'MeasurementFcn',      measCT6, ...
        'MeasurementNoise',    detection.MeasurementNoise);

    % ---------- IMM wrapper (sticky) ----------
    TPM = [0.986 0.010 0.004;   % CV→CV/CA/CT
           0.010 0.986 0.004;   % CA→*
           0.015 0.015 0.970];  % CT→*
    imm = trackingIMM( ...
        {ekfCV, ekfCA, ekfCT}, ...
        'TransitionProbabilities', TPM, ...
        'ModelProbabilities',      [0.85 0.10 0.05], ...
        'ModelNames',              ["constvel","constacc","constturn"]);
end